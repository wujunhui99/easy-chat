# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import im_pb2 as im__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in im_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ImStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetChatLog = channel.unary_unary(
                '/im.Im/GetChatLog',
                request_serializer=im__pb2.GetChatLogReq.SerializeToString,
                response_deserializer=im__pb2.GetChatLogResp.FromString,
                _registered_method=True)
        self.SetUpUserConversation = channel.unary_unary(
                '/im.Im/SetUpUserConversation',
                request_serializer=im__pb2.SetUpUserConversationReq.SerializeToString,
                response_deserializer=im__pb2.SetUpUserConversationResp.FromString,
                _registered_method=True)
        self.GetConversations = channel.unary_unary(
                '/im.Im/GetConversations',
                request_serializer=im__pb2.GetConversationsReq.SerializeToString,
                response_deserializer=im__pb2.GetConversationsResp.FromString,
                _registered_method=True)
        self.PutConversations = channel.unary_unary(
                '/im.Im/PutConversations',
                request_serializer=im__pb2.PutConversationsReq.SerializeToString,
                response_deserializer=im__pb2.PutConversationsResp.FromString,
                _registered_method=True)
        self.CreateGroupConversation = channel.unary_unary(
                '/im.Im/CreateGroupConversation',
                request_serializer=im__pb2.CreateGroupConversationReq.SerializeToString,
                response_deserializer=im__pb2.CreateGroupConversationResp.FromString,
                _registered_method=True)


class ImServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetChatLog(self, request, context):
        """获取会话记录
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetUpUserConversation(self, request, context):
        """建立会话: 群聊, 私聊
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConversations(self, request, context):
        """获取会话
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutConversations(self, request, context):
        """更新会话
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateGroupConversation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetChatLog': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChatLog,
                    request_deserializer=im__pb2.GetChatLogReq.FromString,
                    response_serializer=im__pb2.GetChatLogResp.SerializeToString,
            ),
            'SetUpUserConversation': grpc.unary_unary_rpc_method_handler(
                    servicer.SetUpUserConversation,
                    request_deserializer=im__pb2.SetUpUserConversationReq.FromString,
                    response_serializer=im__pb2.SetUpUserConversationResp.SerializeToString,
            ),
            'GetConversations': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConversations,
                    request_deserializer=im__pb2.GetConversationsReq.FromString,
                    response_serializer=im__pb2.GetConversationsResp.SerializeToString,
            ),
            'PutConversations': grpc.unary_unary_rpc_method_handler(
                    servicer.PutConversations,
                    request_deserializer=im__pb2.PutConversationsReq.FromString,
                    response_serializer=im__pb2.PutConversationsResp.SerializeToString,
            ),
            'CreateGroupConversation': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGroupConversation,
                    request_deserializer=im__pb2.CreateGroupConversationReq.FromString,
                    response_serializer=im__pb2.CreateGroupConversationResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'im.Im', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('im.Im', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Im(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetChatLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/im.Im/GetChatLog',
            im__pb2.GetChatLogReq.SerializeToString,
            im__pb2.GetChatLogResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetUpUserConversation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/im.Im/SetUpUserConversation',
            im__pb2.SetUpUserConversationReq.SerializeToString,
            im__pb2.SetUpUserConversationResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetConversations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/im.Im/GetConversations',
            im__pb2.GetConversationsReq.SerializeToString,
            im__pb2.GetConversationsResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PutConversations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/im.Im/PutConversations',
            im__pb2.PutConversationsReq.SerializeToString,
            im__pb2.PutConversationsResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateGroupConversation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/im.Im/CreateGroupConversation',
            im__pb2.CreateGroupConversationReq.SerializeToString,
            im__pb2.CreateGroupConversationResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
