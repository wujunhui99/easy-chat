// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: chat.proto

package server

import (
	"context"

	"github.com/wujunhui99/easy-chat/apps/chat/rpc/chat"
	"github.com/wujunhui99/easy-chat/apps/chat/rpc/internal/logic"
	"github.com/wujunhui99/easy-chat/apps/chat/rpc/internal/svc"
)

type ChatServer struct {
	svcCtx *svc.ServiceContext
	chat.UnimplementedChatServer
}

func NewChatServer(svcCtx *svc.ServiceContext) *ChatServer {
	return &ChatServer{
		svcCtx: svcCtx,
	}
}

// 获取会话记录
func (s *ChatServer) GetChatLog(ctx context.Context, in *chat.GetChatLogReq) (*chat.GetChatLogResp, error) {
	l := logic.NewGetChatLogLogic(ctx, s.svcCtx)
	return l.GetChatLog(in)
}

// 建立会话: 群聊, 私聊
func (s *ChatServer) SetUpUserConversation(ctx context.Context, in *chat.SetUpUserConversationReq) (*chat.SetUpUserConversationResp, error) {
	l := logic.NewSetUpUserConversationLogic(ctx, s.svcCtx)
	return l.SetUpUserConversation(in)
}

// 获取会话
func (s *ChatServer) GetConversations(ctx context.Context, in *chat.GetConversationsReq) (*chat.GetConversationsResp, error) {
	l := logic.NewGetConversationsLogic(ctx, s.svcCtx)
	return l.GetConversations(in)
}

// 更新会话
func (s *ChatServer) PutConversations(ctx context.Context, in *chat.PutConversationsReq) (*chat.PutConversationsResp, error) {
	l := logic.NewPutConversationsLogic(ctx, s.svcCtx)
	return l.PutConversations(in)
}

func (s *ChatServer) CreateGroupConversation(ctx context.Context, in *chat.CreateGroupConversationReq) (*chat.CreateGroupConversationResp, error) {
	l := logic.NewCreateGroupConversationLogic(ctx, s.svcCtx)
	return l.CreateGroupConversation(in)
}
