syntax = "v1"

info (
	title:  "社交服务的实例对象"
	author: "木兮老师"
)

type (
	Friends {
		Id        int32  `json:"id,omitempty"`
		FriendUid string `json:"friend_uid,omitempty"`
		Nickname  string `json:"nickname,omitempty"`
		Avatar    string `json:"avatar,omitempty"`
		Remark    string `json:"remark,omitempty"`
	}
	FriendRequests {
		Id           int64  `json:"id,omitempty"`
		UserId       string `json:"user_id,omitempty"`
		ReqUid       string `json:"req_uid,omitempty"`
		ReqMsg       string `json:"req_msg,omitempty"`
		ReqTime      int64  `json:"req_time,omitempty"`
		HandleResult int    `json:"handle_result,omitempty"`
		HandleMsg    string `json:"handle_msg,omitempty"`
	}
	Groups {
		Id              string `json:"id,omitempty"`
		Name            string `json:"name,omitempty"`
		Icon            string `json:"icon,omitempty"`
		Status          int64  `json:"status,omitempty"`
		GroupType       int64  `json:"group_type,omitempty"`
		IsVerify        bool   `json:"is_verify,omitempty"`
		Notification    string `json:"notification,omitempty"`
		NotificationUid string `json:"notification_uid,omitempty"`
		CreatedAt       int64  `json:"created_at,omitempty"`
	}
	GroupMembers {
		Id            int64  `json:"id,omitempty"`
		GroupId       string `json:"group_id,omitempty"`
		UserId        string `json:"user_id,omitempty"`
		Nickname      string `json:"nickname,omitempty"`
		UserAvatarUrl string `json:"user_avatar_url,omitempty"`
		RoleLevel     int    `json:"role_level,omitempty"`
		InviterUid    string `json:"inviter_uid,omitempty"`
		OperatorUid   string `json:"operator_uid,omitempty"`
	}
	GroupRequests {
		Id            int64  `json:"id,omitempty"`
		UserId        string `json:"user_id,omitempty"`
		GroupId       string `json:"group_id,omitempty"`
		ReqMsg        string `json:"req_msg,omitempty"`
		ReqTime       int64  `json:"req_time,omitempty"`
		JoinSource    int64  `json:"join_source,omitempty"`
		InviterUserId string `json:"inviter_user_id,omitempty"`
		HandleUserId  string `json:"handle_user_id,omitempty"`
		HandleTime    int64  `json:"handle_time,omitempty"`
		HandleResult  int64  `json:"handle_result,omitempty"`
	}
)

// ---- Group Update (partial update via update_mask) ----
type (
	GroupUpdateReq {
		GroupId    string   `json:"group_id"` // 必填
		Name       string   `json:"name,optional"` // 可选
		Icon       string   `json:"icon,optional"` // 可选
		IsVerify   bool     `json:"is_verify,optional"` // 可选
		UpdateMask []string `json:"update_mask"` // 必填：要更新的字段列表，如 ["name","icon","is_verify"]
	}
	GroupUpdateResp  {}
)

type (
	// 共同好友数量（仅传对端，自己从 token 获取）
	MutualFriendCountReq {
		OtherId string `json:"other_id"`
	}
	MutualFriendCountResp {
		Count int64 `json:"count"`
	}
)

type (
	FriendPutInReq {
		ReqMsg  string `json:"req_msg,omitempty"`
		ReqTime int64  `json:"req_time,omitempty"`
		UserId  string `json:"user_uid"`
	}
	FriendPutInResp  {}
)

type (
	FriendPutInHandleReq {
		FriendReqId  int32  `json:"friend_req_id,omitempty"`
		HandleResult int32  `json:"handle_result,omitempty"` // 处理结果
		Remark       string `json:"remark,optional"`
	}
	FriendPutInHandleResp  {}
)

type (
	FriendPutInListReq {
		Direction int32 `json:"direction,optional"` // 1=收到的(别人加我 user_id=我) 2=我发出的(我加别人 req_uid=我) 默认1
	}
	FriendPutInListResp {
		List []*FriendRequestView `json:"list"`
	}
)

type (
	FriendRequestView {
		Id           int64  `json:"id,omitempty"`
		UserId       string `json:"user_id,omitempty"`
		UserNickname string `json:"user_nickname,omitempty"`
		UserAvatar   string `json:"user_avatar,omitempty"`
		ReqUid       string `json:"req_uid,omitempty"`
		ReqNickname  string `json:"req_nickname,omitempty"`
		ReqAvatar    string `json:"req_avatar,omitempty"`
		ReqMsg       string `json:"req_msg,omitempty"`
		ReqTime      int64  `json:"req_time,omitempty"`
		HandleResult int    `json:"handle_result,omitempty"`
		HandleMsg    string `json:"handle_msg,omitempty"`
	}
)

type (
	FriendListReq  {}
	FriendListResp {
		List []*Friends `json:"list"`
	}
)

type (
	// 删除好友请求：传好友用户ID
	FriendDeleteReq {
		FriendUid string `json:"friend_uid"`
	}
	FriendDeleteResp  {}
)

type (
	GroupCreateReq {
		Name string `json:"name,omitempty"`
		Icon string `json:"icon,omitempty"`
	}
	GroupCreateResp {
		GroupId string `json:"group_id,omitempty"`
	}
)

type (
	GroupPutInRep {
		GroupId    string `json:"group_id,omitempty"`
		ReqMsg     string `json:"req_msg,omitempty"`
		ReqTime    int64  `json:"req_time,omitempty"`
		JoinSource int64  `json:"join_source,omitempty"`
		InviterUid string `json:"inviter_uid,optional"` // 邀请入群时必填
	}
	GroupPutInResp  {}
)

type (
	GroupPutInHandleRep {
		GroupReqId   int32  `json:"group_req_id,omitempty"`
		GroupId      string `json:"group_id,omitempty"`
		HandleResult int32  `json:"handle_result,omitempty"` // 处理结果
	}
	GroupPutInHandleResp  {}
)

type (
	GroupPutInListRep {
		GroupId string `json:"group_id,omitempty"`
	}
	GroupPutInListResp {
		List []*GroupRequests `json:"list,omitempty"`
	}
)

type (
	GroupListRep  {}
	GroupListResp {
		List []*Groups `json:"list,omitempty"`
	}
)

type (
	MyCreatedGroupsReq  {}
	MyCreatedGroupsResp {
		List []*Groups `json:"list,omitempty"`
	}
)

type (
	GroupUserListReq {
		GroupId string `json:"group_id,omitempty"`
	}
	GroupUserListResp {
		List []*GroupMembers `json:"List,omitempty"`
	}
)

@server (
	prefix:     v1/social
	group:      friend
	jwt:        JwtAuth
	middleware: JwtParse
)
service social {
	@doc "好友申请"
	@handler friendPutIn
	post /friend/putIn (FriendPutInReq) returns (FriendPutInResp)

	@doc "好友申请处理"
	@handler friendPutInHandle
	put /friend/putIn (FriendPutInHandleReq) returns (FriendPutInHandleResp)

	@doc "好友申请列表 direction=1 收到的 | 2 发出的"
	@handler friendPutInList
	get /friend/putIns (FriendPutInListReq) returns (FriendPutInListResp)

	@doc "好友列表"
	@handler friendList
	get /friends (FriendListReq) returns (FriendListResp)

	@doc "删除好友"
	@handler friendDelete
	delete /friend (FriendDeleteReq) returns (FriendDeleteResp)

	@doc "共同好友数量（Redis 求交集）"
	@handler mutualFriendCount
	get /friend/mutual (MutualFriendCountReq) returns (MutualFriendCountResp)
}

@server (
	prefix:     v1/social
	group:      group
	jwt:        JwtAuth
	middleware: JwtParse
)
service social {
	@doc "创群"
	@handler createGroup
	post /group (GroupCreateReq) returns (GroupCreateResp)

	@doc "申请进群"
	@handler groupPutIn
	post /group/putIn (GroupPutInRep) returns (GroupPutInResp)

	@doc "申请进群处理"
	@handler groupPutInHandle
	put /group/putIn (GroupPutInHandleRep) returns (GroupPutInHandleResp)

	@doc "申请进群列表"
	@handler groupPutInList
	get /group/putIns (GroupPutInListRep) returns (GroupPutInListResp)

	@doc "用户群列表"
	@handler groupList
	get /groups (GroupListRep) returns (GroupListResp)

	@doc "我创建的群列表"
	@handler myCreatedGroups
	get /groups/myCreated (MyCreatedGroupsReq) returns (MyCreatedGroupsResp)

	@doc "成员列表列表"
	@handler groupUserList
	get /group/users (GroupUserListReq) returns (GroupUserListResp)

	@doc "更新群信息（带 update_mask）"
	@handler groupUpdate
	patch /group (GroupUpdateReq) returns (GroupUpdateResp)
}

