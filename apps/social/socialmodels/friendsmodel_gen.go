// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package socialmodels

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	friendsFieldNames          = builder.RawFieldNames(&Friends{})
	friendsRows                = strings.Join(friendsFieldNames, ",")
	friendsRowsExpectAutoSet   = strings.Join(stringx.Remove(friendsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	friendsRowsWithPlaceHolder = strings.Join(stringx.Remove(friendsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheFriendsIdPrefix              = "cache:friends:id:"
	cacheFriendsUserIdFriendUidPrefix = "cache:friends:userId:friendUid:"
)

type (
	friendsModel interface {
		Insert(ctx context.Context, data *Friends) (sql.Result, error)
		Inserts(ctx context.Context, session sqlx.Session, data ...*Friends) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Friends, error)
		FindOneByUserIdFriendUid(ctx context.Context, userId string, friendUid string) (*Friends, error)
		FindByUidAndFid(ctx context.Context, uid, fid string) (*Friends, error)
		ListByUserid(ctx context.Context, userId string) ([]*Friends, error)
		Update(ctx context.Context, data *Friends) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultFriendsModel struct {
		sqlc.CachedConn
		table string
	}

	Friends struct {
		Id        uint64         `db:"id"`
		UserId    string         `db:"user_id"`
		FriendUid string         `db:"friend_uid"`
		Remark    sql.NullString `db:"remark"`
		AddSource sql.NullInt64  `db:"add_source"`
		Status    uint64         `db:"status"` // 0正常 1删除 2拉黑 3免打扰
		CreatedAt time.Time      `db:"created_at"`
		UpdatedAt time.Time      `db:"updated_at"`
	}
)

func newFriendsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultFriendsModel {
	return &defaultFriendsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`friends`",
	}
}

func (m *defaultFriendsModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	friendsIdKey := fmt.Sprintf("%s%v", cacheFriendsIdPrefix, id)
	friendsUserIdFriendUidKey := fmt.Sprintf("%s%v:%v", cacheFriendsUserIdFriendUidPrefix, data.UserId, data.FriendUid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, friendsIdKey, friendsUserIdFriendUidKey)
	return err
}

func (m *defaultFriendsModel) FindOne(ctx context.Context, id uint64) (*Friends, error) {
	friendsIdKey := fmt.Sprintf("%s%v", cacheFriendsIdPrefix, id)
	var resp Friends
	err := m.QueryRowCtx(ctx, &resp, friendsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", friendsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFriendsModel) FindOneByUserIdFriendUid(ctx context.Context, userId string, friendUid string) (*Friends, error) {
	friendsUserIdFriendUidKey := fmt.Sprintf("%s%v:%v", cacheFriendsUserIdFriendUidPrefix, userId, friendUid)
	var resp Friends
	err := m.QueryRowIndexCtx(ctx, &resp, friendsUserIdFriendUidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `friend_uid` = ? limit 1", friendsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, friendUid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFriendsModel) Insert(ctx context.Context, data *Friends) (sql.Result, error) {
	friendsIdKey := fmt.Sprintf("%s%v", cacheFriendsIdPrefix, data.Id)
	friendsUserIdFriendUidKey := fmt.Sprintf("%s%v:%v", cacheFriendsUserIdFriendUidPrefix, data.UserId, data.FriendUid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, friendsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.FriendUid, data.Remark, data.AddSource, data.Status)
	}, friendsIdKey, friendsUserIdFriendUidKey)
	return ret, err
}

// Inserts 批量插入（适配 status，时间列使用数据库默认）
// Inserts 批量插入（使用 status 字段；created_at/updated_at 使用数据库默认，不手动赋值）
// 注意：friendsRowsExpectAutoSet 已排除 id/created_at/updated_at，当前顺序：user_id, friend_uid, remark, add_source, status
func (m *customFriendsModel) Inserts(ctx context.Context, session sqlx.Session, data ...*Friends) (sql.Result, error) {
	if len(data) == 0 {
		return nil, nil
	}
	var (
		sb   strings.Builder
		args []any
	)
	sb.WriteString(fmt.Sprintf("insert into %s (%s) values ", m.table, friendsRowsExpectAutoSet))
	for i, v := range data {
		sb.WriteString("(?, ?, ?, ?, ?)")
		args = append(args, v.UserId, v.FriendUid, v.Remark, v.AddSource, v.Status)
		if i != len(data)-1 {
			sb.WriteString(",")
		}
	}
	return session.ExecCtx(ctx, sb.String(), args...)
}

// ListByUserid 查询某用户的全部好友记录（包含各种 status，需要上层过滤）
func (m *customFriendsModel) ListByUserid(ctx context.Context, userId string) ([]*Friends, error) {
	query := fmt.Sprintf("select %s from %s where `user_id` = ?", friendsRows, m.table)
	var resp []*Friends
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, userId)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// FindByUidAndFid 查找一条方向边（含所有状态）
func (m *customFriendsModel) FindByUidAndFid(ctx context.Context, uid, fid string) (*Friends, error) {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? and `friend_uid` = ?", friendsRows, m.table)
	var resp Friends
	err := m.QueryRowNoCacheCtx(ctx, &resp, query, uid, fid)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFriendsModel) Update(ctx context.Context, newData *Friends) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	friendsIdKey := fmt.Sprintf("%s%v", cacheFriendsIdPrefix, data.Id)
	friendsUserIdFriendUidKey := fmt.Sprintf("%s%v:%v", cacheFriendsUserIdFriendUidPrefix, data.UserId, data.FriendUid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, friendsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.FriendUid, newData.Remark, newData.AddSource, newData.Status, newData.Id)
	}, friendsIdKey, friendsUserIdFriendUidKey)
	return err
}

func (m *defaultFriendsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheFriendsIdPrefix, primary)
}

func (m *defaultFriendsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", friendsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFriendsModel) tableName() string {
	return m.table
}
