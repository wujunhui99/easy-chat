// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: chat.proto

package chatclient

import (
	"context"

	"github.com/wujunhui99/easy-chat/apps/chat/rpc/chat"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ChatLog                     = chat.ChatLog
	Conversation                = chat.Conversation
	CreateGroupConversationReq  = chat.CreateGroupConversationReq
	CreateGroupConversationResp = chat.CreateGroupConversationResp
	GetChatLogReq               = chat.GetChatLogReq
	GetChatLogResp              = chat.GetChatLogResp
	GetConversationsReq         = chat.GetConversationsReq
	GetConversationsResp        = chat.GetConversationsResp
	PutConversationsReq         = chat.PutConversationsReq
	PutConversationsResp        = chat.PutConversationsResp
	SetUpUserConversationReq    = chat.SetUpUserConversationReq
	SetUpUserConversationResp   = chat.SetUpUserConversationResp

	Chat interface {
		// 获取会话记录
		GetChatLog(ctx context.Context, in *GetChatLogReq, opts ...grpc.CallOption) (*GetChatLogResp, error)
		// 建立会话: 群聊, 私聊
		SetUpUserConversation(ctx context.Context, in *SetUpUserConversationReq, opts ...grpc.CallOption) (*SetUpUserConversationResp, error)
		// 获取会话
		GetConversations(ctx context.Context, in *GetConversationsReq, opts ...grpc.CallOption) (*GetConversationsResp, error)
		// 更新会话
		PutConversations(ctx context.Context, in *PutConversationsReq, opts ...grpc.CallOption) (*PutConversationsResp, error)
		CreateGroupConversation(ctx context.Context, in *CreateGroupConversationReq, opts ...grpc.CallOption) (*CreateGroupConversationResp, error)
	}

	defaultChat struct {
		cli zrpc.Client
	}
)

func NewChat(cli zrpc.Client) Chat {
	return &defaultChat{
		cli: cli,
	}
}

// 获取会话记录
func (m *defaultChat) GetChatLog(ctx context.Context, in *GetChatLogReq, opts ...grpc.CallOption) (*GetChatLogResp, error) {
	client := chat.NewChatClient(m.cli.Conn())
	return client.GetChatLog(ctx, in, opts...)
}

// 建立会话: 群聊, 私聊
func (m *defaultChat) SetUpUserConversation(ctx context.Context, in *SetUpUserConversationReq, opts ...grpc.CallOption) (*SetUpUserConversationResp, error) {
	client := chat.NewChatClient(m.cli.Conn())
	return client.SetUpUserConversation(ctx, in, opts...)
}

// 获取会话
func (m *defaultChat) GetConversations(ctx context.Context, in *GetConversationsReq, opts ...grpc.CallOption) (*GetConversationsResp, error) {
	client := chat.NewChatClient(m.cli.Conn())
	return client.GetConversations(ctx, in, opts...)
}

// 更新会话
func (m *defaultChat) PutConversations(ctx context.Context, in *PutConversationsReq, opts ...grpc.CallOption) (*PutConversationsResp, error) {
	client := chat.NewChatClient(m.cli.Conn())
	return client.PutConversations(ctx, in, opts...)
}

func (m *defaultChat) CreateGroupConversation(ctx context.Context, in *CreateGroupConversationReq, opts ...grpc.CallOption) (*CreateGroupConversationResp, error) {
	client := chat.NewChatClient(m.cli.Conn())
	return client.CreateGroupConversation(ctx, in, opts...)
}
