// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: user.proto

package userclient

import (
	"context"

	"github.com/wujunhui99/easy-chat/apps/user/rpc/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FindUserReq         = user.FindUserReq
	FindUserResp        = user.FindUserResp
	GetLoginDevicesReq  = user.GetLoginDevicesReq
	GetLoginDevicesResp = user.GetLoginDevicesResp
	GetUserInfoReq      = user.GetUserInfoReq
	GetUserInfoResp     = user.GetUserInfoResp
	KickDeviceReq       = user.KickDeviceReq
	KickDeviceResp      = user.KickDeviceResp
	LoginReq            = user.LoginReq
	LoginResp           = user.LoginResp
	LogoutReq           = user.LogoutReq
	LogoutResp          = user.LogoutResp
	RegisterReq         = user.RegisterReq
	RegisterResp        = user.RegisterResp
	Request             = user.Request
	Response            = user.Response
	UserEntity          = user.UserEntity

	User interface {
		Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
		FindUser(ctx context.Context, in *FindUserReq, opts ...grpc.CallOption) (*FindUserResp, error)
		Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
		KickDevice(ctx context.Context, in *KickDeviceReq, opts ...grpc.CallOption) (*KickDeviceResp, error)
		GetLoginDevices(ctx context.Context, in *GetLoginDevicesReq, opts ...grpc.CallOption) (*GetLoginDevicesResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}

func (m *defaultUser) FindUser(ctx context.Context, in *FindUserReq, opts ...grpc.CallOption) (*FindUserResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.FindUser(ctx, in, opts...)
}

func (m *defaultUser) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Logout(ctx, in, opts...)
}

func (m *defaultUser) KickDevice(ctx context.Context, in *KickDeviceReq, opts ...grpc.CallOption) (*KickDeviceResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.KickDevice(ctx, in, opts...)
}

func (m *defaultUser) GetLoginDevices(ctx context.Context, in *GetLoginDevicesReq, opts ...grpc.CallOption) (*GetLoginDevicesResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetLoginDevices(ctx, in, opts...)
}
